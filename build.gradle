buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.5.2"
        classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.6'
    }
}

plugins {
    id "java"
    id 'jacoco'
    id "me.champeau.gradle.jmh" version "0.5.2"
    id "com.github.erizo.gradle.jcstress" version "0.8.6"
    id "org.sonarqube" version "3.0"
}

group 'one.william.rate-limiter'
version '1.0-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

ext {
    jcstressVersion = '0.5'
    jmhVersion = '1.20'
    assertJVersion = '3.11.1'
    junit5Version = '5.3.1'
    mockitoVersion = '2.+'
    guavaVersion = '30.1-jre'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5Version}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertJVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
    jcstress "org.openjdk.jcstress:jcstress-core:${jcstressVersion}"
    jcstress "org.mockito:mockito-core:${mockitoVersion}"
    jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
    jmh "com.google.guava:guava:${guavaVersion}"
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "William1104_rate-limiter"
        property "sonar.organization", "one-williamwong"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportsPath", "build/test-results/*/TEST-*.xml"
    }
}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
    }
    finalizedBy jacocoTestReport
}

jmh {
    failOnError = true
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt")
    resultFormat = 'CSV'
    jvmArgsAppend = [
            '-server',
            '-XX:+UnlockDiagnosticVMOptions',
            '-XX:+UseNUMA'
    ]
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}

jcstress {
    jvmArgs = '-server -XX:+UnlockDiagnosticVMOptions -XX:+UseNUMA'
    concurrency = 100
    verbose = true
}

