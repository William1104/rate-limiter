group 'how-it-works'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.5.2"
        classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.6'
    }
}

plugins {
    id "org.sonarqube" version "3.0"
    id "java"
    id "me.champeau.gradle.jmh"
    id "jcstress"
}

sourceCompatibility = 11
targetCompatibility = 11

ext {
    jcstressVersion = '0.7'
    jmhVersion = '1.20'
    assertJVersion = '3.11.1'
    junit5Version = '5.3.1'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5Version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
    testCompile "org.assertj:assertj-core:${assertJVersion}"
    jcstress "org.openjdk.jcstress:jcstress-core:${jcstressVersion}"
    jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
}

plugins {
    id "org.sonarqube" version "3.0"
}

sonarqube {
    properties {
        property "sonar.projectKey", "William1104_rate-limiter"
        property "sonar.organization", "reddish-green"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

test {
    useJUnitPlatform()
}

jmh {
    failOnError = true
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt")
    resultFormat = 'CSV'
}

jcstress {
    jcstressDependency "org.openjdk.jcstress:jcstress-core:${jcstressVersion}"
    jvmArgs = '-server -XX:+UnlockDiagnosticVMOptions'
    iterations = 10
}

